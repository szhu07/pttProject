#include <LiquidCrystal.h>  // Include the LCD library

// Pin definitions
const int WRIST_PIN = A0;    // Wrist sensor
const int FINGER_PIN = A1;   // Fingertip sensor

// LCD pin connections
const int RS = 12;
const int E = 11;
const int D4 = 5;
const int D5 = 4;
const int D6 = 3;
const int D7 = 2;
LiquidCrystal lcd(RS, E, D4, D5, D6, D7);  // Initialize LCD

// Timing constants
const unsigned long MIN_BEAT_INTERVAL = 500; // Minimum time between beats (ms)
const unsigned long MAX_PTT = 100;          // Maximum PTT value (ms)
const unsigned long DEBUG_INTERVAL = 1000;   // Debug output interval
const float RISE_THRESHOLD_PERCENT = 0.3;    // Signal must rise by 30% of range

// Variables for signal processing
const int AVG_WINDOW = 10;  // Window size for moving average
int signal0Buffer[AVG_WINDOW] = {0};
int signal1Buffer[AVG_WINDOW] = {0};
int bufferIndex = 0;

// Beat detection variables
int peakValue0 = 0, peakValue1 = 0;
int valleyValue0 = 1023, valleyValue1 = 1023;
bool risingSignal0 = false, risingSignal1 = false;
unsigned long lastBeatTime0 = 0, lastBeatTime1 = 0;

// PTT calculation variables
const int PTT_SAMPLES = 5;  // Number of PTT values to average
int pttBuffer[PTT_SAMPLES];
int pttIndex = 0;
bool bufferFilled = false;

// BP calculation constants
const float k_s = -0.5;
const float b_s = 160.0;
const float k_d = -0.2;
const float b_d = 100.0;

// LCD update timing
unsigned long lastLCDUpdate = 0;
const unsigned long LCD_UPDATE_INTERVAL = 500; // Update LCD every 500ms

// Debug timing
unsigned long lastDebugTime = 0;

bool detectBeat(int currentSignal, int& peak, int& valley, bool& rising, unsigned long& lastBeatTime) {
   unsigned long currentTime = millis();
   bool beatDetected = false;
   
   // Update peak and valley
   peak = max(currentSignal, peak);
   valley = min(currentSignal, valley);
   
   // Calculate thresholds
   int range = peak - valley;
   int midline = valley + (range / 2);
   int requiredRise = range * RISE_THRESHOLD_PERCENT;
   
   // Detect beat on falling edge after significant rise
   if (rising && currentSignal < midline) {
       if ((currentTime - lastBeatTime) > MIN_BEAT_INTERVAL && 
           (peak - valley) > requiredRise) {
           beatDetected = true;
           lastBeatTime = currentTime;
       }
       rising = false;
   }
   // Start new rise
   else if (!rising && currentSignal > midline) {
       rising = true;
   }
   
   // Decay peak and valley values slower
   if (currentTime % 2000 == 0) {  // Every 2 seconds
       peak = peak * 0.98;    // Slower decay
       valley = valley * 1.02; // Slower increase
       
       // Reset if range gets too small
       if ((peak - valley) < 50) {
           peak = currentSignal;
           valley = currentSignal;
       }
   }
   
   return beatDetected;
}

int getAverageSignal(int newValue, int* buffer) {
   buffer[bufferIndex] = newValue;
   long sum = 0;
   for(int i = 0; i < AVG_WINDOW; i++) {
       sum += buffer[i];
   }
   return sum / AVG_WINDOW;
}

void setup() {
   Serial.begin(250000);
   Serial.println("PTT Measurement System Started");
   Serial.println("------------------------------");
   
   // Initialize LCD
   lcd.begin(16, 2);  // Set up 16x2 LCD
   lcd.clear();
   lcd.print("PTT Monitoring");
   lcd.setCursor(0, 1);
   lcd.print("System Ready");
   delay(2000);  // Show startup message
   lcd.clear();
}

void loop() {
   // Read and process signals
   int rawSignal0 = analogRead(WRIST_PIN);
   int rawSignal1 = analogRead(FINGER_PIN);
   
   int signal0 = getAverageSignal(rawSignal0, signal0Buffer);
   int signal1 = getAverageSignal(rawSignal1, signal1Buffer);
   bufferIndex = (bufferIndex + 1) % AVG_WINDOW;

   // Detect beats using dynamic thresholds
   bool beat0 = detectBeat(signal0, peakValue0, valleyValue0, risingSignal0, lastBeatTime0);
   bool beat1 = detectBeat(signal1, peakValue1, valleyValue1, risingSignal1, lastBeatTime1);

   // Handle beat detections - only display on serial, not LCD
   if (beat0) {
       Serial.println("Wrist beat detected!");
   }
   
   if (beat1) {
       Serial.println("Finger beat detected!");
       unsigned long timeSinceWristBeat = millis() - lastBeatTime0;
       
       if (timeSinceWristBeat < MAX_PTT) {
           unsigned long ptt = timeSinceWristBeat;
           
           if (ptt >= 15 && ptt <= 60) {
               Serial.print("PTT detected: ");
               Serial.print(ptt);
               Serial.println(" ms");
               
               // Update LCD with latest PTT
               lcd.setCursor(0, 0);
               lcd.print("PTT: ");
               lcd.print(ptt);
               lcd.print(" ms      ");
               
               pttBuffer[pttIndex] = ptt;
               pttIndex = (pttIndex + 1) % PTT_SAMPLES;
               
               if (pttIndex == 0) {
                   bufferFilled = true;
               }
               
               if (bufferFilled) {
                   int sumPTT = 0;
                   for (int i = 0; i < PTT_SAMPLES; i++) {
                       sumPTT += pttBuffer[i];
                   }
                   float avgPTT = (float)sumPTT / PTT_SAMPLES;
                   float pttSeconds = avgPTT / 1000.0;
                   
                   float systolicBP = k_s * (1.0 / pttSeconds) + b_s;
                   float diastolicBP = k_d * (1.0 / pttSeconds) + b_d;
                   
                   // Update LCD with BP
                   lcd.setCursor(0, 1);
                   lcd.print("BP: ");
                   lcd.print(systolicBP, 1);
                   lcd.print("/");
                   lcd.print(diastolicBP, 1);
                   lcd.print(" mmHg ");
                   
                   // Serial output still shows BP
                   Serial.print("BP Reading: ");
                   Serial.print(systolicBP, 1);
                   Serial.print("/");
                   Serial.print(diastolicBP, 1);
                   Serial.println(" mmHg");
                   Serial.println("------------------------------");
               }
           }
       }
   }

   // Debug output to serial only
   unsigned long currentTime = millis();
   if (currentTime - lastDebugTime >= DEBUG_INTERVAL) {
       Serial.println("\nSignal Analysis:");
       Serial.print("Wrist   - Raw: ");
       Serial.print(rawSignal0);
       Serial.print(", Avg: ");
       Serial.print(signal0);
       Serial.print(", Peak: ");
       Serial.print(peakValue0);
       Serial.print(", Valley: ");
       Serial.print(valleyValue0);
       Serial.print(", Range: ");
       Serial.print(peakValue0 - valleyValue0);
       Serial.print(", Rising: ");
       Serial.println(risingSignal0 ? "Yes" : "No");
       
       Serial.print("Finger  - Raw: ");
       Serial.print(rawSignal1);
       Serial.print(", Avg: ");
       Serial.print(signal1);
       Serial.print(", Peak: ");
       Serial.print(peakValue1);
       Serial.print(", Valley: ");
       Serial.print(valleyValue1);
       Serial.print(", Range: ");
       Serial.print(peakValue1 - valleyValue1);
       Serial.print(", Rising: ");
       Serial.println(risingSignal1 ? "Yes" : "No");
       
       Serial.println("------------------------");
       lastDebugTime = currentTime;
   }

   delayMicroseconds(50);
}
